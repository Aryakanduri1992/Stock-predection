{"version":3,"sources":["script.js"],"names":["symbol","closingPrices","Object","values","stockData","map","day","parseFloat","reverse","dates","response","ctx","document","getElementById","getContext","displayChart","data","type","console","error","labels","concat","_toConsumableArray","Array","fill","_","i","datasets","borderWidth","label","length","predictions","borderColor","x","display","title","text","y","addEventListener","value","fetch","method","headers","Content-Type","body","JSON","stringify","then","json"],"mappings":"8dAO+BA,SAAAA,aAAQA,EAAAA,GAAV,IAAfC,EAAAC,OAAAC,OAAAC,GAAAC,IAAA,SAAAC,GAAA,OAAAC,WAAAD,EAAA,eAAAE,UAEJC,EAAAP,OAAAQ,KAAQN,GAAAI,UACRG,EAAAC,SAAIC,eAAI,WAAAC,WAAA,MACVC,IAAAA,MAAAA,EAAaC,CATjBC,KAWO,OACHC,KAAQC,CAZZC,OAAA,GAAAC,OAAAC,mBAAAb,GAAAa,mBAAAC,MAAA,GAAAC,KAAA,IAAAnB,IAAA,SAAAoB,EAAAC,GAAA,MAAA,OAAAL,OAAAK,EAAA,OAFJC,SAAA,CA4BgB,CAVPZ,MAAaX,oBACCY,KAAGd,EAAoCK,YAAe,wBAAzEqB,YAAA,EACoBJ,MAAMpB,GAG1B,CAAeyB,MAAA,mBAELb,KAAA,GAAAK,OAAAC,mBAAAC,MAAAtB,EAAA6B,QAAAN,KAAA,OAAAF,mBAAAS,IACIC,YAAA,wBAAsCJ,YAAqB,EAD/DJ,MAAA,KAMMQ,QAAAA,CACAJ,OAAW,CACLK,EAAA,CAEVC,SAAA,EACWC,MAAA,CACHD,SAAA,EACSE,KAAA,SAXXC,EAAA,CAJHH,SAAA,EAqBFC,MAAA,CACGD,SAAA,EACDE,KAAA,cA9CnBxB,SAASC,eAAe,iBAAiByB,iBAAiB,QAAS,WAC/D,IAAMtC,EAASY,SAASC,eAAe,eAAe0B,MACtDC,MAAM,WAAY,CACdC,OAAQ,OACRC,QAAS,CACLC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAAE9C,OAAQA,MAElC+C,KAAK,SAAArC,GAAQ,OAAIA,EAASsC,SAT/BpC,KAASC,SAAAA,GACCb,aAASY,EAASC,UAAAA,EAAekB,eACvC,MACU,SAAAZ,GACNuB,QAASvB,MAAA,iCAAAA","file":"script.min.js","sourcesContent":["document.getElementById('predictButton').addEventListener('click', () => {\n    const symbol = document.getElementById('stockSymbol').value;\n    fetch('/predict', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ symbol: symbol })\n    })\n    .then(response => response.json())\n    .then(data => {\n        displayChart(data.stockData, data.predictions);\n    })\n    .catch(error => {\n        console.error('Error predicting stock prices:', error);\n    });\n});\n\nfunction displayChart(stockData, predictions) {\n    const closingPrices = Object.values(stockData).map(day => parseFloat(day['4. close'])).reverse();\n    const dates = Object.keys(stockData).reverse();\n    \n    const ctx = document.getElementById('myChart').getContext('2d');\n    new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: [...dates, ...Array(7).fill('').map((_, i) => `Day ${i + 1}`)],\n            datasets: [\n                {\n                    label: 'Historical Prices',\n                    data: closingPrices,\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1,\n                    fill: false\n                },\n                {\n                    label: 'Predicted Prices',\n                    data: [...Array(closingPrices.length).fill(null), ...predictions],\n                    borderColor: 'rgba(255, 99, 132, 1)',\n                    borderWidth: 1,\n                    fill: false\n                }\n            ]\n        },\n        options: {\n            scales: {\n                x: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'Date'\n                    }\n                },\n                y: {\n                    display: true,\n                    title: {\n                        display: true,\n                        text: 'Price'\n                    }\n                }\n            }\n        }\n    });\n}\n"]}